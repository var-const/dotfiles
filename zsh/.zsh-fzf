#!/bin/zsh

#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/-completion.zsh
#
# - $FZF_TMUX               (default: 1)
# - $FZF_TMUX_HEIGHT        (default: '40%')
# - $FZF_COMPLETION_TRIGGER (default: '**')
# - $FZF_COMPLETION_OPTS    (default: empty)

# unmap Ctrl-J (could be used as Enter)
# would be great if it was also more like Unite - could expand directories. Then
# it would be an inobtrusive file explorer
# tmux - ctrl-c leads to hanging, need a second ctrl-c

__fzf_generic_path_completion() {
  local base lbuf find_opts fzf_opts suffix tail fzf dir leftover matches nnm
  # (Q) flag removes a quoting level: "foo\ bar" => "foo bar"
  base=${(Q)1}
  lbuf=$2
  find_opts=$3
  fzf_opts=$4
  suffix=$5
  tail=$6
  [ ${FZF_TMUX:-1} -eq 1 ] && fzf="fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%}" || fzf="fzf"

  if ! setopt | \grep nonomatch > /dev/null; then
    nnm=1
    setopt nonomatch
  fi
  dir="$base"
  while [ 1 ]; do
    if [ -z "$dir" -o -d ${~dir} ]; then
      leftover=${base/#"$dir"}
      leftover=${leftover/#\/}
      [ "$dir" = './' ] && dir=''
      dir=${~dir}
      matches=$(\find -L $dir* -xdev ${=find_opts} 2> /dev/null | ${=fzf} ${=FZF_COMPLETION_OPTS} ${=fzf_opts} -q "$leftover" | while read item; do
        printf "%q$suffix " "$item"
      done)
      matches=${matches% }
      if [ -n "$matches" ]; then
        LBUFFER="$lbuf$matches$tail"
      fi
      zle redisplay
      break
    fi
    dir=$(dirname "$dir")
    dir=${dir%/}/
  done
  FZF_MATCHES="$matches"
  [ -n "$nnm" ] && unsetopt nonomatch
}

_fzf_path_completion() {
  __fzf_generic_path_completion "$1" "$2" \
    "-name .git -prune -o -name .svn -prune -o \
    -type d -print -o -type f -print -o -type l -print ""$3" \
    "-m" "" " "
}

_fzf_dir_completion() {
  __fzf_generic_path_completion "$1" "$2" \
    "-name .git -prune -o -name .svn -prune -o -type d -print -maxdepth 0" \
    "" "/" ""
}

_fzf_feed_fifo() (
  rm -f "$fifo"
  mkfifo "$fifo"
  cat <&0 > "$fifo" &
)

_fzf_complete() {
  local fifo fzf_opts lbuf fzf matches
  fifo="${TMPDIR:-/tmp}/fzf-complete-fifo-$$"
  fzf_opts=$1
  lbuf=$2
  [ ${FZF_TMUX:-1} -eq 1 ] && fzf="fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%}" || fzf="fzf"

  _fzf_feed_fifo "$fifo"
  matches=$(cat "$fifo" | ${=fzf} ${=FZF_COMPLETION_OPTS} ${=fzf_opts} -q "${(Q)prefix}" | tr '\n' ' ')
  if [ -n "$matches" ]; then
    LBUFFER="$lbuf$matches"
  fi
  zle redisplay
  rm -f "$fifo"
}

_fzf_complete_telnet() {
  _fzf_complete '+m' "$@" < <(
    \grep -v '^\s*\(#\|$\)' /etc/hosts | \grep -Fv '0.0.0.0' |
        awk '{if (length($2) > 0) {print $2}}' | sort -u
  )
}

_fzf_complete_ssh() {
  _fzf_complete '+m' "$@" < <(
    cat <(cat ~/.ssh/config /etc/ssh/ssh_config 2> /dev/null | \grep -i '^host' | \grep -v '*') \
        <(\grep -v '^\s*\(#\|$\)' /etc/hosts | \grep -Fv '0.0.0.0') |
        awk '{if (length($2) > 0) {print $2}}' | sort -u
  )
}

_fzf_complete_export() {
  _fzf_complete '-m' "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}

_fzf_complete_unset() {
  _fzf_complete '-m' "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}

_fzf_complete_unalias() {
  _fzf_complete '+m' "$@" < <(
    alias | sed 's/=.*//'
  )
}

typeset -A FZF_COMPLETION_TRIGGERS
typeset -A FZF_PATHS

# @FIXME single variable
# From here recursive ("find")
FZF_COMPLETION_TRIGGERS[ff]=''
# From here non-recursive ("jump")
FZF_COMPLETION_TRIGGERS[jj]='-maxdepth 0'
# From dotfiles recursive ("dotfiles")
FZF_COMPLETION_TRIGGERS[dd]="-o -path '*/tmp/' -prune -o -path temp -prune"
# FZF_COMPLETION_TRIGGERS[dd]=''
FZF_PATHS[dd]='~/dotfiles/'
# From home recursive ("home")
FZF_COMPLETION_TRIGGERS[hh]=''
FZF_PATHS[hh]='~/'
# From txt recursive
FZF_COMPLETION_TRIGGERS[tt]=''
FZF_PATHS[tt]='~/txt/'

# From root recursive ("root")
FZF_COMPLETION_TRIGGERS[rr]=''
FZF_PATHS[rr]='/'

# # Go (change directory)
# # From here recursive ("find")
# FZF_COMPLETION_TRIGGERS[gf]=
# # From root recursive ("root")
# FZF_COMPLETION_TRIGGERS[gr]=
# # From here non-recursive ("jump")
# FZF_COMPLETION_TRIGGERS[gj]=
# # From home recursive ("dotfiles")
# FZF_COMPLETION_TRIGGERS[gd]=

# Also fasd provides ,, trigger to choose from most frecent

fzf-completion() {
  local tokens cmd prefix trigger tail fzf matches lbuf d_cmds
  setopt localoptions noshwordsplit

  # http://zsh.sourceforge.net/FAQ/zshfaq03.html
  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
  tokens=(${(z)LBUFFER})
  if [ ${#tokens} -lt 1 ]; then
    eval "zle ${fzf_default_completion:-expand-or-complete}"
    return
  fi

  cmd=${tokens[1]}

  # Completion for "kill" command (does not require trigger sequence)
  if [ $cmd = kill -a ${LBUFFER[-1]} = ' ' ]; then

    [ ${FZF_TMUX:-1} -eq 1 ] && fzf="fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%}" || fzf="fzf"
    matches=$(ps -ef | sed 1d | ${=fzf} ${=FZF_COMPLETION_OPTS} -m | awk '{print $2}' | tr '\n' ' ')
    if [ -n "$matches" ]; then
      LBUFFER="$LBUFFER$matches"
    fi
    zle redisplay

  # Trigger sequence given
  elif eval "type _fzf_complete_${cmd} > /dev/null"; then
    eval "prefix=\"$prefix\" _fzf_complete_${cmd} \"$lbuf\""

  else
    for trigger in "${(@k)FZF_COMPLETION_TRIGGERS}"; do
        trigger_cmd="$FZF_COMPLETION_TRIGGERS[$trigger]"

        [ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")
        tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

        if [ "$cmd" = "$trigger" ]; then
            [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
            [ -z "${tokens[-1]}" ] && lbuf=$LBUFFER        || lbuf=${LBUFFER:0:-${#tokens[-1]}}

            from_dir=${FZF_PATHS[$trigger]-${prefix}}
            local cmd="command find -L $from_dir \\( -path '*/\\.*' -o -fstype 'dev' -o -fstype 'proc' \\) -prune \
                    -o -type d -print 2> /dev/null | sed 1d | xargs readlink -m"
            zle kill-whole-line
            cd "${$(eval "$cmd" | $(__fzfcmd) +m):-.}"

            # @FIXME doesn't work
            zle reset-prompt

            return
        fi
    done

    for trigger in "${(@k)FZF_COMPLETION_TRIGGERS}"; do
        trigger_cmd="$FZF_COMPLETION_TRIGGERS[$trigger]"

        [ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")
        tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

        if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
            [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
            [ -z "${tokens[-1]}" ] && lbuf=$LBUFFER        || lbuf=${LBUFFER:0:-${#tokens[-1]}}

            from_dir=${FZF_PATHS[$trigger]-${prefix}}
            _fzf_path_completion "$from_dir" "$lbuf" "$trigger_cmd"

            # d_cmds=(cd pushd rmdir)

            # elif [ ${d_cmds[(i)$cmd]} -le ${#d_cmds} ]; then
            #     _fzf_dir_completion "$prefix" "$lbuf"
            # else
            #     _fzf_path_completion "$prefix" "$lbuf"
            # fi

            return
        fi
    done

    # Fall back to default completion
    eval "zle ${fzf_default_completion:-expand-or-complete}"
  fi
}

[ -z "$fzf_default_completion" ] &&
  fzf_default_completion=$(bindkey '^I' | \grep -v undefined-key | awk '{print $2}')

zle     -N   fzf-completion
# bindkey '^I' fzf-completion

if [[ $- == *i* ]]; then

# CTRL-T - Paste the selected file path(s) into the command line
__fsel() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . \\( -path '*/\\.*' -o -fstype 'dev' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | sed 1d | cut -b3-"}"
  eval "$cmd" | $(__fzfcmd) -m | while read item; do
    printf '%q ' "$item"
  done
  echo
}

__fzfcmd() {
  [ ${FZF_TMUX:-1} -eq 1 ] && echo "fzf-tmux -d${FZF_TMUX_HEIGHT:-40%}" || echo "fzf"
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fsel)"
  zle redisplay
}
zle     -N   fzf-file-widget
# bindkey '^T' fzf-file-widget

# # ALT-C - cd into the selected directory
# Remapped to Ctrl-G
fzf-cd-widget() {
  local cmd="${FZF_ALT_C_COMMAND:-"command find -L . \\( -path '*/\\.*' -o -fstype 'dev' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | sed 1d | cut -b3-"}"
  cd "${$(eval "$cmd" | $(__fzfcmd) +m):-.}"
  zle reset-prompt
}
zle     -N    fzf-cd-widget
# bindkey '\ec' fzf-cd-widget
bindkey '^G' fzf-cd-widget

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected num
  selected=( $(fc -l 1 | $(__fzfcmd) +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r -q "${LBUFFER//$/\\$}") )
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle redisplay
}
zle     -N   fzf-history-widget
bindkey '^R' fzf-history-widget

fi

# Should be much easier to use than tab or even Ctrl-I.
# Enter might be pressed as Ctrl-M
bindkey '^J' fzf-completion

export FZF_DEFAULT_OPTS="--exact --multi --cycle"
export FZF_TMUX_HEIGHT='60%'
