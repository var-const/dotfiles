"""""""""""""""""""""""""""""""" FLAGS """"""""""""""""

let s:is_mac = (has('mac') || has('macunix') || has('gui_macvim') ||
            \   (!executable('xdg-open') &&
            \     system('uname') =~? '^darwin'))
let s:is_linux = !s:is_mac

let s:is_work = executable('dremel')

"""""""""""""""""""""""""""""""" NEOBUNDLE """"""""""""""""

if has('vim_starting')
    " Required:
    if has('unix')
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    else
        set runtimepath+=~/vimfiles/bundle/neobundle.vim/
    endif
endif

"syntax off " seems like it should be off before the whole NeoBundle thing

if has('unix')
    call neobundle#begin(expand('~/.vim/bundle/'))
else
    call neobundle#begin(expand('~/vimfiles/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'mac' : 'make -f make_mac.mak',
            \       'unix' : 'make',
            \    },
            \ }

NeoBundle 'Shougo/unite.vim'
NeoBundle 'ujihisa/unite-colorscheme'

NeoBundle 'tpope/vim-sensible'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-commentary', {'autoload': {'filetypes':
        \['python','c','cpp','vim','bash','sh','zsh','objcpp','objc','java','javascript','html']
    \}}
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'

""" GIT
NeoBundle 'tpope/vim-fugitive'
" Show a VCS diff using Vim's sign column.
NeoBundle 'airblade/vim-gitgutter'

NeoBundle 'Raimondi/delimitMate'
NeoBundle 'Yggdroot/indentLine'

" Original comment: "If you are using a console version of Vim, or dealing
" with a file that changes externally (e.g. a web server log)
" then Vim does not always check to see if the file has been changed.
" The GUI version of Vim will check more often (for example on Focus change),
" and prompt you if you want to reload the file"
" NeoBundle 'djoshea/vim-autoread'

NeoBundle 'vim-scripts/ReplaceWithRegister'

NeoBundle 'houtsnip/vim-emacscommandline'

" Screws up folding
" NeoBundle 'oblitum/rainbow' " Seems to be very slow
" NeoBundle 'junegunn/rainbow_parentheses.vim'
NeoBundle 'luochen1990/rainbow'

NeoBundle 'ntpeters/vim-better-whitespace'

NeoBundle 'mbbill/undotree'

NeoBundle 'christoomey/vim-tmux-navigator'

" This plugin instead offers an alternative yank command |gy|, which allows to
" specify the accumulator register only once on its initial use, can then be
" repeated
" Since you don't need this plugin to repeat yanks to the unnamed register (just 
" use the built-in y), register "a is used as the default register, i.e. when
" you use gy for the first time without explicitly specifying a register
NeoBundle 'vim-scripts/RepeatableYank'

""" COLORSCHEMES
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'kshenoy/vim-sol'

""" SEARCHING
NeoBundle 'jremmen/vim-ripgrep'

NeoBundle 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
NeoBundle 'junegunn/fzf.vim'

NeoBundle 'haya14busa/incsearch.vim'

""" LANGUAGE SUPPORT
NeoBundle 'leafgarland/typescript-vim'
" Haskell
" NeoBundle 'dag/vim2hs'

" @TODO: unused
" NeoBundle 'SirVer/ultisnips'

call neobundle#end()

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

syntax on

"""""""""""""""""""""""""""""""" SETTINGS """"""""""""""""

let mapleader = " "

""" ENCODING

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,koi8-r,cp1251,default,latin1
set ff=unix

""" SPELLING AND LANGUAGE

language mes C " Use English interface.
set langmenu=C
set helplang=en
autocmd FileType text,gitcommit setlocal spell
set spelllang=en_us,ru_ru
set complete+=kspell
set keymap=russian-jcukenwin
" set iminsert=2
set iminsert=0
set imsearch=-1
inoremap <C-l> " Switch language

""" KEYS TIMEOUT

set timeout
set ttimeout
set timeoutlen=500
set ttimeoutlen=10
set noesckeys

""" TEMP FILES

set directory=~/.vim/tmp
set backup
set backupdir=~/.vim/backups

" Note: persistent undo fails if a file is modified externally
if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
    set undoreload=10000
end
set undolevels=10000
" UndoTree
nmap <leader>u :UndotreeToggle<CR>

" Autosave each time text is changed in normal mode or each time we leave insert
" mode. No more saving-related headaches.
" Don't autosave git commit message, because once it's saved, Fugitive thinks
" the commit should go through
" Don't autosave in git diff mode, something prevents vim from automatically
" saving the staged file. @TODO: find out the reason
autocmd InsertLeave,TextChanged * if &filetype != 'gitcommit' && expand('%') != '' && expand('%:h') !~ 'fugitive' | update | endif
set autowrite " Automatically save buffer before switching to another one

" Return cursor to previous location on load:
autocmd BufReadPost * if &filetype != 'gitcommit' && expand('%:h') !~ 'fugitive' | normal `"

""" CLIPBOARD

" Add the unnamed register to the clipboard
if s:is_linux
    set clipboard=unnamedplus
else
    set clipboard+=unnamed
endif

""" INDENTATION

set number
set textwidth=80
autocmd FileType java,html setlocal textwidth=100
set colorcolumn=+1 " Relative to textwidth

set smartindent
set cindent

set tabstop=2 " how many columns a tab counts for.
" how many columns text is indented with the reindent operations (<< and >>)
set shiftwidth=2
set softtabstop=2
" When expandtab is set, hitting Tab in insert mode will produce the appropriate
" number of spaces.
set expandtab

" From: https://github.com/tejr/dotfiles/blob/master/vim/vimrc
" When indenting lines with < or >, round the indent to a multiple of
" 'shiftwidth', so even if the line is indented by one space it will indent
" up to 4 and down to 0, for example
set shiftround
" Don't join lines with two spaces at the end of sentences; I don't two-space
set nojoinspaces
" Match all forms of brackets in pairs (including angle brackets)
set matchpairs=(:),{:},[:],<:>

let g:indentLine_faster = 1

""" LINE WRAPPING

set wrap
set linebreak
set formatoptions=qrn1

""" SEARCH

set hlsearch "Highlight searching
set showmatch
set ignorecase
set smartcase
"Search/replace commands have /g by default, add /g to override
set gdefault

" Center screen on search next/prev
nnoremap n nzz
nnoremap N Nzz
nnoremap { {zz
nnoremap } }zz

nnoremap <leader>n :Rg<cr>

""" WINDOWS AND TABS

set splitright
set splitbelow

" let terminal resize scale the internal windows
autocmd VimResized * :wincmd =

" Opens a vertical split and switches over
nnoremap <leader>v <C-w>v<C-w>l
" Opens a horizontal split and switches over
nnoremap <leader>h :split<CR><C-w>j
noremap <leader>tn :tabnew<CR>
noremap <C-n> gt
noremap <C-p> gT

nmap <Up> <C-W>-
nmap <Down> <C-W>+
nmap <Left> <C-W><
nmap <Right> <C-W>>

""" AUTO-COMPLETION MENU

set wildmode=list:longest
set wildchar=<Tab>

""" FOLDING

set foldmethod=manual
set foldnestmax=1 "deepest fold is 1 level
set foldlevelstart=0
set nofoldenable " Folding doesn't seem to be a good default

" From: http://stackoverflow.com/questions/9403098/is-it-possible-to-jump-to-closed-folds-in-vim
" Goes to next _closed_ fold, skipping the open folds, unlike the default.
" @TODO: make default available via leader key
nnoremap <silent> zj :call NextClosedFold('j')<cr>
nnoremap <silent> zk :call NextClosedFold('k')<cr>
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction

""" IGNORE PATTERNS

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

""" RANDOM

set ttyfast
" From: https://github.com/tejr/dotfiles/blob/master/vim/vimrc
" Don't bother drawing the screen while executing macros or other automated or
" scripted processes, just draw the screen as it is when the operation
" completes
set lazyredraw

"""""""""""""""" MAPPINGS AND PLUGINS """"""""""""""""

""" EASIER EXIT FROM MODES

inoremap ZZ <esc>:wq<CR>
cnoremap kj <esc>
cnoremap jk <esc>
cnoremap jj <CR>

""" MODIFY DEFAULTS

nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" Swap two mark-jumping bindings. My default use-case is to go to the exact mark
" position, not the beginning of the line.
nnoremap ' `
nnoremap ` '

" I go to the first non-whitespace character a lot more often
nnoremap 0 ^
nnoremap ^ 0
onoremap 0 ^
onoremap ^ 0

""" MOVING STUFF AROUND

" Don't move cursor when joining lines
nnoremap J mqJ`q
" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv
" From https://github.com/junegunn/dotfiles/blob/master/vimrc
nnoremap <silent> <C-k> :move-2<cr>
nnoremap <silent> <C-j> :move+<cr>
xnoremap <silent> <C-k> :move-2<cr>gv
xnoremap <silent> <C-j> :move'>+<cr>gv

""" ERASE FROM EXISTENCE

nnoremap <leader>d "_d
nnoremap <leader>dd "_dd
nnoremap <leader>D "_D
nnoremap <leader>x "_x
nnoremap <leader>X "_X
" @TODO: these are unused. Maybe remap the key to something else?
nnoremap <leader>c "_c
nnoremap <leader>cc "_cc
nnoremap <leader>C "_C

noremap <leader>ft :set filetype

""" FILE BROWSING

let g:unite_source_history_yank_enable = 1
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#matcher_default#use(['matcher_glob'])
nnoremap <leader>ff :Files<cr>
" Filesystem-buffer
nnoremap <leader>fb :<C-u>Unite -no-split -buffer-name=buffer  -start-insert buffer_tab buffer<cr>
" Filesystem-current directory
nnoremap <silent><leader>fc :<C-u>UniteWithBufferDir
            \ -buffer-name=files -no-split -start-insert buffer file file/new<CR>
nnoremap <leader>fclr :<C-u>Unite -no-split -buffer-name=unite-grep  -start-insert colorscheme<cr>

autocmd FileType unite call s:set_unite_settings()
function! s:set_unite_settings()
    nmap <buffer> <ESC> <Plug>(unite_exit)
    nmap <buffer> <Tab> <Plug>(unite_narrowing_path)
    imap <buffer> <Tab> <Plug>(unite_narrowing_path)
endfunction

function! RangeChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp)
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp)
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangeChooser()
nnoremap <leader>fd :<C-U>RangerChooser<CR>

""" BETTER WHITESPACE

let g:better_whitespace_filetypes_blacklist=['unite','mail','qf']

""" COMMENTARY

" Prefer // style comments to the default C-style for C++
autocmd FileType cpp set commentstring=//%s
" Add a commented-out copy above
nmap <leader>yy mtyyP<Plug>CommentaryLine`t

""" YCM

" Otherwise, asks whether is should load the config file
" on every Vim start. Don't know if it's a bug or not, but
" certainly annoying
let g:ycm_confirm_extra_conf = 0
let g:ycm_error_symbol = '✗'
let g:ycm_warning_symbol = '⚠'
let g:ycm_autoclose_preview_window_after_completion = 1
" nnoremap K :YcmCompleter GoTo<CR>
nnoremap <leader>jj :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>
nnoremap <leader>rec :YcmForceCompileAndDiagnostics<CR>
" Enable TypeScript support
if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

""" RELOADING VIMRC

" Source the vimrc file after saving it. This way, you don't have to reload Vim
" to see the changes.
if has("autocmd")
    augroup myvimrchooks
        au!
        autocmd bufwritepost .vimrc source ~/.vim/vimrc
        autocmd bufwritepost vimrc source ~/.vim/vimrc
    augroup END
endif

" Shortcut for editing  vimrc file in a new tab (\ev is for "edit vimrc")
if has('unix')
    "nnoremap <leader>ev :tabedit ~/dotfiles/vim/.vim/.vimrc<CR>
    nnoremap <leader>ev :tabedit ~/dotfiles/vim/.vim/vimrc<CR>
else
    nnoremap <leader>ev :tabedit ~/_vimrc<CR>
endif

""" RAINBOW PARENTHESES

let g:rainbow_active = 1
let g:rainbow_conf = {
            \  'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \  'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
            \}

""" CURSORLINE

" :hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
" :hi CursorLine   cterm=NONE ctermbg=white ctermfg=black
:hi CursorLine   cterm=NONE ctermbg=white
" :hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
" :nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
set cursorline

""" GIT-RELATED

" Fugitive mappings
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gW :Gwrite<CR>:Gcommit --verbose<CR>
nnoremap <Leader>gc :Gcommit --verbose<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gv :Gvdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gl :Glog<CR>

" GitGutter mappings
let g:gitgutter_map_keys = 0
nnoremap <Leader>gA :GitGutterStageHunk<CR>:Gcommit --verbose<CR>
nnoremap <Leader>ga :GitGutterStageHunk<CR>
nnoremap <Leader>gu :GitGutterRevertHunk<CR>
nnoremap <Leader>gp :GitGutterPreviewHunk<CR>
nmap ]c <Plug>GitGutterNextHunk
nmap [c <Plug>GitGutterPrevHunk

""" TMUX NAVIGATOR

" https://stackoverflow.com/questions/6778961/alt-key-shortcuts-not-working-on-gnome-terminal-with-vim
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-j> :TmuxNavigateDown<cr>
nnoremap <silent> <M-k> :TmuxNavigateUp<cr>
nnoremap <silent> <M-l> :TmuxNavigateRight<cr>

""" VIMDIFF

if &diff
    colorscheme sol
endif
" highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

""" GVIM
:set guioptions-=m  " remove menu bar
:set guioptions-=T  " remove toolbar
:set guioptions-=r  " remove right-hand scroll bar
:set guioptions-=L  " remove left-hand scroll bar
set guifont=DejaVuSansMono\ 11
nnoremap <leader>+ :set guifont=DejaVuSansMono\ 11<cr>
nnoremap <leader>- :set guifont=DejaVuSansMono\ 10<cr>

""" COLORSCHEME

colorscheme lucius
LuciusLight
" LuciusDark
" LuciusWhite

""" RANDOM

nnoremap <C-l> g,
nnoremap <C-h> g;

set shell=zsh\ -l

" Write with superuser permissions
cmap w!! w !sudo tee %

" expands %% to current file's directory in command-line mode
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

" @TODO: figure out a better mapping
" Switch to last buffer
nnoremap <BS> :b#<CR>

set list lcs=tab:\|\ 

""" UNUSED begin
" UltiSnipsExpandTrigger="<c-j>"
" " let g:UltiSnipsListSnippets ="<s-tab>"
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                 return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction

" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"
" let g:UltiSnipsSnippetDirectories = ["custom-ulti-snippets", "UltiSnips"]

" http://www.reddit.com/r/vim/comments/1yfzg2/does_anyone_actually_use_easymotion/
cnoremap ?t <CR>:t''<CR>
cnoremap ?T <CR>:T''<CR>
cnoremap ?m <CR>:m''<CR>
cnoremap ?M <CR>:M''<CR>
cnoremap ?d <CR>:d<CR>``

" set termguicolors

" @TODO: restricted '/' ?
" would only allow jumping within current screen (without moving it), to be more friendly in case of
" errors

""" UNUSED end

if s:is_work
  source ~/work-dotfiles/vim/.vimrc
endif
