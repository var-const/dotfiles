priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# snippet beginend "$1.begin(), $1.end() (beginend)"
# ${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
# endsnippet

# snippet cl "class .. (class)"
# class ${1:`!p snip.rv = snip.basename or "name"`}
# {
# public:
# 	${1/(\w+).*/$1/} (${2:arguments});
# 	virtual ~${1/(\w+).*/$1/} ();

# private:
# 	${0:/* data */}
# };
# endsnippet

# snippet ns "namespace .. (namespace)"
# namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
# {
# 	${VISUAL}${0}
# }${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
# endsnippet

# snippet readfile "read file (readF)"
# std::vector<char> v;
# if (FILE *fp = fopen(${1:"filename"}, "r"))
# {
# 	char buf[1024];
# 	while(size_t len = fread(buf, 1, sizeof(buf), fp))
# 		v.insert(v.end(), buf, buf + len);
# 	fclose(fp);
# }
# endsnippet

# snippet map "std::map (map)"
# std::map<${1:key}, ${2:value}> map$0;
# endsnippet

# snippet vector "std::vector (v)"
# std::vector<${1:char}> v$0;
# endsnippet

# snippet tp "template <typename ..> (template)"
# template <typename ${1:_InputIter}>
# endsnippet

# Vector
snippet v
vector<${1:T}> ${0:<name>};
endsnippet

# Vector with initializer list ("vector of")
snippet vof
vector<${1:T}> ${2:<name>} = {${0:<args>}};
endsnippet

# Topcoder specific: vector of strings
snippet vs
vector<string>
endsnippet

# Topcoder specific: vector of ints
snippet vi
vector<int>
endsnippet

# Short lambda
snippet lams
[${1}]{ return ${0}; }
endsnippet

# Short lambda with arguments
snippet lamsa
[${1}](${2:arg}){ return ${0}; }
endsnippet

# Long lambda
snippet laml
auto const ${1:name} = [${2}] {
	${0}
};
endsnippet

# Long lambda with arguments
snippet lamla
auto const ${1:name} = [${2}](${3:arg}) {
	${0}
};
endsnippet

# for loop with integer counter
snippet forn
for (int i = 0; i != ${1:limit}; ++i) {
	${0}
}
endsnippet

# for loop with iterators
snippet forit
for (auto i = ${1:cont}.begin(); i != $1.end(); ++i) {
	${0}
}
endsnippet

# range-based for
snippet for
for (auto&& ${1:el} : ${2:cont}) {
	${0}
}
endsnippet

# begin-end for stl algorithms
snippet be
${1:cont}.begin(), $1.end()${0}
endsnippet

# const variable
snippet let
auto const ${1:<name>} = ${0:<value>};
endsnippet

# includes
snippet inc
#include <${0:<header>}>
endsnippet

# Wrap selected text in "if"
snippet if
if (${1:false}) {
	${VISUAL}${2}
}
endsnippet

# class
snippet cl "class"
class ${1:<class_name>} {
public:
	${0:body}

private:
};
endsnippet

snippet f "function"
${1:void} ${2:<name>}(${3})
{
	${VISUAL}${4}
}
endsnippet

# @TODO: ostringstream with clearing in each loop

# vim:ft=snippets:
